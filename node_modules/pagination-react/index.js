'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./pagination.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pagination = function (_Component) {
	_inherits(Pagination, _Component);

	function Pagination(props) {
		_classCallCheck(this, Pagination);

		var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

		_this.state = {
			selectedCount: props.selectedCount || 1, //从1开始
			showGroup: parseInt(props.selectedCount / props.groupCount) || 0 //当前 group
		};

		if (props.setUpdate) props.setUpdate(_this.update.bind(_this));
		return _this;
	}

	_createClass(Pagination, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.props.callback(this.props.selectedCount);
		}
	}, {
		key: 'update',
		value: function update(index) {
			this.itemClick(index || 1);
		}
	}, {
		key: 'getItems',
		value: function getItems() {
			var _count = 0;
			var _items = [];
			var _selectedCount = this.state.selectedCount;
			var _groupCount = this.props.groupCount;

			while (_count < _groupCount) {
				var _content = _count + 1 + this.state.showGroup * _groupCount;
				if (_content > this.props.count) break;

				_items.push(_react2.default.createElement(Item, {
					key: _count,
					content: _content,
					selectedCount: _selectedCount,
					click: this.itemClick.bind(this, _content) }));
				_count++;
			}
			return _items;
		}
	}, {
		key: 'itemClick',
		value: function itemClick(count) {
			var _this2 = this;

			if (this.state.selectedCount == count) return;
			var _showGroup = parseInt((count - 1) / this.props.groupCount);

			this.setState({
				selectedCount: count,
				showGroup: _showGroup
			}, function () {
				_this2.props.callback(count);
			});
		}
	}, {
		key: 'first',
		value: function first() {
			this.itemClick(1);
		}
	}, {
		key: 'previous',
		value: function previous() {
			var _count = this.state.selectedCount - 1;
			if (_count < 1) _count = 1;

			this.itemClick(_count);
		}
	}, {
		key: 'next',
		value: function next() {
			var _count = this.state.selectedCount + 1;
			var _pCount = this.props.count;
			if (_count > _pCount) _count = _pCount;

			this.itemClick(_count);
		}
	}, {
		key: 'last',
		value: function last() {
			var _count = this.props.count;
			this.itemClick(_count);
		}
	}, {
		key: 'render',
		value: function render() {
			var _items = this.getItems();
			var _first = this.first.bind(this);
			var _previous = this.previous.bind(this);
			var _next = this.next.bind(this);
			var _last = this.last.bind(this);

			return _react2.default.createElement(
				'div',
				{ className: 'container-pagination' },
				_react2.default.createElement(
					'button',
					{ className: 'first', onClick: _first },
					'<<'
				),
				_react2.default.createElement(
					'button',
					{ className: 'direction', onClick: _previous },
					"<"
				),
				_items,
				_react2.default.createElement(
					'button',
					{ className: 'direction', onClick: _next },
					">"
				),
				_react2.default.createElement(
					'button',
					{ className: 'first', onClick: _last },
					'>>'
				)
			);
		}
	}]);

	return Pagination;
}(_react.Component);

exports.default = Pagination;


Pagination.propTypes = {
	count: _propTypes2.default.number.isRequired,
	groupCount: _propTypes2.default.number.isRequired,
	callback: _propTypes2.default.func.isRequired
};

var Item = function (_Component2) {
	_inherits(Item, _Component2);

	function Item() {
		_classCallCheck(this, Item);

		return _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).apply(this, arguments));
	}

	_createClass(Item, [{
		key: 'render',
		value: function render() {
			var _content = this.props.content;
			var _click = this.props.click;
			var _className = "container-item";
			if (this.props.selectedCount == _content) _className = "container-item-selected";

			return _react2.default.createElement(
				'div',
				{ className: _className, onClick: _click },
				_content
			);
		}
	}]);

	return Item;
}(_react.Component);
